// MAIN 
//        Ejercicio 3

        Jugador jugador1 = new Jugador("Pepe", 1, "portero");
        Jugador jugador2 = new Jugador("Antonio", 2, "defensa");
        Jugador jugador3 = new Jugador("Raul", 3, "defensa");
        Jugador jugador4 = new Jugador("Jesus", 4, "defensa");
        Jugador jugador5 = new Jugador("Mario", 5, "defensa");
        Jugador jugador6 = new Jugador("Sergio", 6, "centro");
        Jugador jugador7 = new Jugador("Fernando", 7, "centro");
        Jugador jugador8 = new Jugador("Laura", 8, "delantero");
        Jugador jugador9 = new Jugador("Diana", 9, "delantero");

        Equipo equipo1 = new Equipo("Sevilla");
        Equipo equipo2 = new Equipo("Cadiz");
        Equipo equipo3 = new Equipo("Granada");

        equipo1.inscribirJugador(jugador1);
        equipo1.inscribirJugador(jugador2);
        equipo1.inscribirJugador(jugador3);
        equipo2.inscribirJugador(jugador4);
        equipo2.inscribirJugador(jugador5);
        equipo2.inscribirJugador(jugador6);
        equipo3.inscribirJugador(jugador7);
        equipo3.inscribirJugador(jugador8);
        equipo3.inscribirJugador(jugador9);

        equipo1.setPartidosGanados(5);
        equipo2.setPartidosGanados(2);
        equipo3.setPartidosGanados(3);
        equipo1.setPartidosEmpatados(2);
        equipo2.setPartidosEmpatados(1);
        equipo3.setPartidosEmpatados(4);
        equipo1.setPartidosPerdidos(1);
        equipo2.setPartidosPerdidos(4);
        equipo3.setPartidosPerdidos(2);

        Liga liga1 = new Liga("Liga fantasy");
        liga1.inscribirEquipo(equipo1);
        liga1.inscribirEquipo(equipo2);
        liga1.inscribirEquipo(equipo3);

        liga1.imprimirClasificacion();


// CLASE LIGA
public class Liga {

    private String nombre;
    private Equipo[] listaEquipos;
    private int numEquipos;


    private Liga(){
        this.nombre = "nombre";
        this.listaEquipos = new Equipo[10];
        this.numEquipos = 0;
    }

    public Liga(String nombre) {
        this();
        this.nombre = nombre;
    }

    public void imprimirClasificacion() {
        Equipo[] listaEquiposTmp = new Equipo[numEquipos];
        int posEquipo = 0;
        for (int i = 0; i < listaEquipos.length; i++) {
            if (listaEquipos[i] != null) {
                listaEquiposTmp[posEquipo] = listaEquipos[i];
                posEquipo++;
            }
        }

        Arrays.sort(listaEquiposTmp);

        for (int i = 0; i < listaEquiposTmp.length; i++) {
            System.out.println(listaEquiposTmp[i]);
        }
    }

    public boolean participa(Equipo equipo) {
        for (int i = 0; i < listaEquipos.length; i++) {
            if (equipo.equals(listaEquipos[i])){
                return true;
            }
        }

        return false;
    }

    public void inscribirEquipo(Equipo equipo) {
        if (!participa(equipo)) {
            for (int i = 0; i < listaEquipos.length; i++) {
                if (listaEquipos[i] == null) {
                    listaEquipos[i] = equipo;
                    this.numEquipos++;
                    break;
                }
            }
        }
    }

// CLASE EQUIPO
public class Equipo implements Comparable<Equipo>{
    
    private String nombre;
    private Jugador[] listaJugadores;
    private int partidosGanados;
    private int partidosEmpatados;
    private int partidosPerdidos;


    private Equipo() {
        this.nombre = "nombre";
        this.listaJugadores = new Jugador[11];
        this.partidosGanados = 0;
        this.partidosEmpatados = 0;
        this.partidosPerdidos = 0;
    }


    public Equipo(String nombre) {
        this();
        this.nombre = nombre;
    }

    public void setPartidosGanados(int partidosGanados) {
        this.partidosGanados = partidosGanados;
    }

    public void setPartidosEmpatados(int partidosEmpatados) {
        this.partidosEmpatados = partidosEmpatados;
    }

    public void setPartidosPerdidos(int partidosPerdidos) {
        this.partidosPerdidos = partidosPerdidos;
    }

    public void imprimirPlantilla() {
        for (int i = 0; i < listaJugadores.length; i++) {
            if (listaJugadores[i] != null) {
                listaJugadores[i].imprimirPerfil();
            }
        }
    }

    public int getPuntuacion() {

        return this.partidosGanados * 3 + this.partidosEmpatados;
    }


    public boolean esJugador(Jugador jugador) {
        for (int i = 0; i < listaJugadores.length; i++) {
            if (jugador.equals(listaJugadores[i])){
                return true;
            }
        }

        return false;
    }


    public void inscribirJugador(Jugador jugador) {
        if (!esJugador(jugador)) {
            for (int i = 0; i < listaJugadores.length; i++) {
                if (listaJugadores[i] == null) {
                    listaJugadores[i] = jugador;
                    break;
                }
            }
        }
    }


    @Override
    public String toString() {
        return this.nombre + " V " + this.partidosGanados
                + " E " + this.partidosEmpatados + " D " + this.partidosPerdidos
                + " Pts " + this.getPuntuacion();
    }

    @Override
    public int compareTo(Equipo equipo) {
        return equipo.getPuntuacion() - this.getPuntuacion();
    }
}

// CLASE JUGADOR
public class Jugador {

    private String nombre;
    private int dorsal;
    private String posicion;

    private Jugador() {
        this.nombre = "nombre";
        this.dorsal = 1;
        this.posicion = "default";
    }


    public Jugador(String nombre, int dorsal, String posicion) {
        this();
        this.nombre = nombre;
        this.dorsal = dorsal;
        this.posicion = posicion;
    }

    public void imprimirPerfil() {
        System.out.println(this.nombre + ", dorsal " + this.dorsal + ", posicion " + this.posicion);
    }
}



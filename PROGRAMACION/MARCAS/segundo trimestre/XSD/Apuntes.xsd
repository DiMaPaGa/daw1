<?xml version="1.0" encoding="UTF-8"?> 
    <!-- Los XML schemas son documentos XML, por lo que todo esquema debe empezar con una declaración XML-->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"> 
        <!--En la segunda línea, ya declaramos el elemento esquema. 
        Me decanto por el prefijo "xs", aunque también podría haber utilizado "xsd" -->

        <!-- CONSIDERACIONES PREVIAS:
            1.- Parto de la base de que el valor por defecto de minOccurs y maxOccurs es "1", 
                por lo que emplearé estos atributos únicamente en aquellos elementos donde se requiera 
                mostrar valores distintos a los predeterminados.
            2. Del mismo modo, en los atributos, su "uso" por defecto es opcional, por lo que tampoco
               lo mencionaré en el caso de que se produzca este suceso.
            
            
            
            
            -->

            <!--CREANDO NUESTROS PROPIOS TIPOS DE DATOS: RESTRICCIONES 
    
            1. crear un  nuevo tipo simple-->

            <xs:simpleType name="monedaUSA">
                <xs:restriction base="xs:decimal">
                    <xs:fractionDigits value="2"/> <!-- solo floats:número de decimales-->
                </xs:restriction>
            </xs:simpleType>

           <!--2. pattern -->

           <xs:simpleType name="nombreSuperheroe">
                        <xs:restriction base="xs:string">
                            <xs:pattern value="\d{8}[A-Z]" />
                        </xs:restriction>
                    </xs:simpleType>

    <xs:element name="nota"><!-- Así empezar a declarar el primer elemento, el general, el que lo engloba todo-->
        <xs:complexType> <!-- va a ser un conjunto de otros-->
            <xs:sequence> <!-- Se utiliza este elemento para indicar una secuencia de elementos que tienen que aparecer en el
                documento XML. Deben aparecer todos, y en el mismo orden en que se especifican -->
                <xs:element name="strings" type="xs:string" fixed="3" /> <!-- FIXED establece un valor fijo para el elemento-->
                <xs:element name="uRLs" type="xs:anyURI" minOccurs="0" maxOccurs="unbounded" default="http:sevilla.com"/> <!-- Especifica un valor POR DEFECTO para el elemento-->
                <xs:element name="decimal" type="xs:decimal"  /> <!-- numero decimal de precisión (dígitos significativos) arbitraria-->
                <xs:element name="float" type="xs:float"  /> <!-- numero punto flotante de 32 bits de precisión simple, mientras de double es de 64 bits de doble precisión-->
                <xs:element name="casado" type="xs:boolean"  /> <!-- true o false-->
                <xs:element name="numVueltas" type="xs:integer"  /> <!-- numeros enteros tanto en positivo y negativo-->
                <xs:element name="codigo"> <!-- EJEMPLO DE RESTRICCION DE MIN Y MAX INCLUIDO, numéricos, fecha y hora. 
                                            xs:minExclusive: límite inferior de un intervalo de valores, con el límite no incluido. 
                                            xs:maxExclusive: límite superior de un intervalo de valores, con el límite no incluido..-->
                    <xs:simpleType> 
                        <xs:restriction base="xs:integer">
                            <xs:minInclusive value="1"/>
                            <xs:maxInclusive value="9999"/>
                        </xs:restriction>
                    </xs:simpleType>
                </xs:element>

                <xs:element name="ubicacion"> <!-- EJEMPLO DE RESTRICCION DE TIPO ENUMERACIÓN lista de valores admitidos. Se
                    usa en cualquier tipo de datos.-->
                    <xs:simpleType>
                        <xs:restriction base="xs:string">
                            <xs:enumeration value="estantería 1"/>
                            <xs:enumeration value="estantería 2"/>
                            <xs:enumeration value="estantería 12"/>
                            <xs:enumeration value="estantería 13"/>
                            <xs:enumeration value="estantería 14"/>
                        </xs:restriction>
                    </xs:simpleType>
                </xs:element>
                <xs:element name="moneda" type="monedaUSA"/>

                <xs:element name="superheroe"> <!-- Ejemplo restriccion string por extension mínima de caracteres. 
                                                Si quisieramos indicar dimensión exacta= xs:lenght
                                                xs:maxLenght para longitud máxima-->
                    <xs:simpleType>
                        <xs:restriction base="xs:string">
                            <xs:minLength value="1" />
                        </xs:restriction>
                    </xs:simpleType>
                </xs:element>

                <xs:element name="superheroe2" type="nombreSuperheroe"/>

            </xs:sequence>

        

            <!-- xs:pattern: patrón o expresión regular. 

                REPRESENTACION
                . -> Representa cualquier caracter.
                \w -> Cualquier letra, mayúscula o minúscula.
                \d -> Un dígito.
                \D -> Cualquier carácter que no sea un dígito.
                \s -> Cualquier carácter similar a un espacio, como tabuladores, saltos de línea, etc.
                \S -> Cualquier carácter que no sea similar a un espacio.
                [abc] -> Cualquiera de los caracteres contenidos dentro de los corchetes, sólo se permitirá un único carácter.
                [A-Z] -> Intervalo de valores, se permitirá cualquiera que este dentro del intervalo. Recuerda que los caracteres están
                        representados a través de datos numéricos.
                [^abc] -> Significa cualquier caracter que no sea alguno de los contenidos entre corchetes.
                (a|b) -> uno de los dos caracteres. A efectos prácticos sería igual a [ab].

                CARDINALIDAD
                ? -> De 0 a 1 ocurrencias.
                * -> De 0 a infinitas ocurrencias.
                + -> De 1 a infinitas ocurrencias.
                {n} -> n ocurrencias.
                {n,m} -> Mínimo de n ocurrencias y máximo de m. 
                {n,} -> Mínimo de n ocurrencias y máximo de infinitas.

                EJEMPLOS: \d{4,8} -> Sucesión de dígitos de un mínimo de 4 y un máximo de 8.
                        \d{8}[A-Z] -> DNI con letra final en mayúscula.
                        \w+ -> de 1 a infinitos caracteres
                        \w+@\w+.\w+ -> Correo electrónico!!!!
                        \d{1,3}.\d{1,3}.\d{1,3}.\d{1,3} -> Dirección IPv4
                         <xs:pattern value=[A-Z]{3}\.[0-9]{5}\.com/> o [A-Z]+\.[0-9]{5}\.com/

            • xs:whitespace: especifica lo que hacer con los
            espacios en blanco, saltos de línea, retornos de
            carro y tabuladores. Los valores aceptados son:
            preserve (conservar), replace (reemplazar por
            espacios en blanco) y collapse (convertir en un sólo
            espacio). Se usa en tipos de datos de texto

            xs:totalDigits: número exacto de dígitos. Se usa
            en datos de tipo numérico. -->


                <!-- TIPOS DE FECHA 
                    * duration: duración de tiempo
                    • dateTime: instante de tiempo específico, usando calendario gregoriano, en formato "YYYYMM-DDThh:mm:ss"
                    • date: fecha específica del calendario gregoriano, en formato "YYYY-MM-DD” * 
                    • time: una instancia de tiempo que ocurre cada día,en formato "hh:mm:ss"
                    • gYearMonth: un año y mes del calendario gregoriano
                    • gYear: año del calendario gregoriano
                    • gMonthDay: día y mes del calendario gregoriano
                    • gMonth: un mes del calendario gregoriano
                    • gDay: una fecha del calendario gregoriano (día)

                    MODELOS DE CONTENIDOS PARA ELEMENTOS : dentro de complexType

                    ELEMENTO SEQUENCE: Se utiliza este elemento para indicar una secuencia de elementos que tienen que aparecer en el
                    documento XML. Deben aparecer todos, y en el mismo orden en que se especifican.

                    ELEMENTO CHOICE: Especifica una lista de elementos de los cuales sólo puede aparecer uno en el documento XML.
                    El elemento “choice” puede incluir opcionalmente los atributos minOccurs y maxOccurs, para especificar el mínimo y máximo número de elementos hijos
                    que pueden incluirse en el documento.

                    ELEMENTO ALL: Se comporta igual que el elemento <xsd:sequence>, pero no es obligado que en el documento XML aparezcan 
                    todos los elementos especificados, ni en el mismo orden.

                    ¡ojo!!!!!!!!!!!!!! ELEMENTO MIXED: el elemento puede contener tanto datos carácter como elementos hijo. con los saltos de línea o texto plano
                    BERTO LO USOOOO
                    Los elementos hijo se definen igual que en el modelo anterior, mediante los elementos “sequence”, “choice” o “all”.
                    Para indicar que el elemento puede además incluir datos carácter se usa el atributo “mixed” con valor igual al “true”
                    en el elemento “complexType”
                            ejemplo: <xsd:element name="confirmacionPedido">
                                        <xsd:complexType mixed=”true”>
                                            <xsd:sequence>
                                                <xsd:element name=”intro” type=”xsd:string”/>
                                                <xsd:element name=”nombre” type=”xsd:string”/>
                                                <xsd:element name=”fecha” type=”xsd:string”/>
                                            <xsd:sequence>
                                        </xsd:complexType>
                                    </xsd:element>
                    
                    LOS ELEMENTOS VACIOS, pero con atributos, hay que declararlos como complejos. Sólo si no contuvieran atributos
                    podrían declararse como simples
                            EJEMPLO:
                            <xsd:element name=”antiguedad”>
                                <xsd:complexType>
                                    <xsd:attribute name=”anyosDeServicio” type=”xsd:positiveInteger”/>
                                </xsd:complexType>
                            </xsd:element> -->
                              
                

            <xs:attribute name="nombreAtributo" type="xs:byte" use="required"/><!-- eJEMPLO DE ATRIBUTO: 
                en TIPO, solo pueden contener tipos simples, 
                USO, puede ser required, optional (es el valor por defecto si no se pone) o prohibited(no debe aparecer en el doc xml)
                DEFAULT (Opcional): si el atributo no aparece en el documento XML, se le asigna el valor especificado en el atributo “default”. 
                ¡¡¡¡Los valores por defecto sólo tienen sentido si el atributo es opcional, de lo contrario tendremos un error!!!!default="0" fixed="0"
                FIXED (Opcional): define un valor fijo para el atributo.
                si el valor del atributo está presente en la instancia del documento XML, el valor debe ser el
                mismo que el que indica el atributo “fixed”
                si el atributo no está presente en el documento XML, se le asigna el valor contenido en el
                atributo “fixed”. DEFAULT Y FIXED no pueden aparecer a la vez fixed="0"

            -->
        </xs:complexType>
    </xs:element>

    <!-- 
    1.actividad 1 del 2 febrero: Tengo elementos complejos definidos por mi(cp, telefono y dni)
    2. actividad 1, tan sencilla que no merece la pena
    3. Actividad 2 del 2 de febrero:elementos complejos definidos por mi.Está muy bien, parecida a la de la biblioteca, y además con 
    atributo con restricción.
    4.actividad 2, muy sencilla, le meto lo de las fechas y estan comentadas.
    5.en la actividad 3 del 2 febrero, lo más interesante es eto:
    <xs:element name="modeloCoche" maxOccurs="unbounded">
                    <xs:complexType mixed="true">
                        <xs:simpleContent>
                            <xs:extension base="xs:string">
                                <xs:attribute name="idModeloCoche" use="required">
                                    <xs:simpleType>
                                        <xs:restriction base="xs:string">
                                            <xs:pattern value="[a-z][a-z]\d{3}"/>
                                        </xs:restriction>   
                                    </xs:simpleType>
                                </xs:attribute>
                                <xs:attribute name="idsRefModeloCoche">
                                    <xs:simpleType>
                                        <xs:restriction base="xs:string">
                                            <xs:pattern value="[a-z][a-z]\d{3} [a-z][a-z]\d{3}"/>              
                                        </xs:restriction> 
                                    </xs:simpleType>
                                </xs:attribute>
                            </xs:extension>
                        </xs:simpleContent>
                    </xs:complexType>
                </xs:element>
    6. en la actividad 3= defino el tipo persona y tipo complejo info
    7. en la actividad 4, de nuevo se define DNI y formato de restriccion pattern del año académico.
    8. Prueba es igual que el 4 pero mejor explicado
    9. biblioteca(correccion de Mfernanda
    10.Mi biblioteca, es el que está hecho por mi y totalmente validado.

    TRABAJO:
    1.-lISTADO DE ESPECIES: uso de byte, anyUri, restriccion de numeración, COMPLEXTYPE MIXTO para incluir saltos de línea
    uso de tipo default en un elemento que luego se desglosa enn un simpletype y restriccion de numeración y
    pattern de coordenadas:

     <xs:element name="coordinates"> 
        <xs:simpleType>
            <xs:restriction base="xs:string">
                <xs:pattern value="\d+\.\d+,\d+\.\d+"/>  Esta restricción limitará el formato al de las coordenadas, siguiendo las bases del XML, permitiendo unicamente cadenas como "678253.0,4611593.56" y nada más.
            </xs:restriction>
        </xs:simpleType>
    </xs:element>

    2. adjudicaciones: No muy interesante, unicamente lo de publicacion
    3. donantessengre: atributo tipo boleano 
    4 BOE: tiene cosas complejas como la creación de los items que tienen a su vez atributos complejos

-->






</xs:schema>
    